[{"C:\\Users\\RobertBraga\\Desktop\\proiectDupaModificari\\proiectTW\\frontend\\src\\index.js":"1","C:\\Users\\RobertBraga\\Desktop\\proiectDupaModificari\\proiectTW\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\RobertBraga\\Desktop\\proiectDupaModificari\\proiectTW\\frontend\\src\\App.js":"3","C:\\Users\\RobertBraga\\Desktop\\proiectDupaModificari\\proiectTW\\frontend\\src\\components\\PaginaPrincipala.js":"4","C:\\Users\\RobertBraga\\Desktop\\proiectDupaModificari\\proiectTW\\frontend\\src\\components\\Student.js":"5","C:\\Users\\RobertBraga\\Desktop\\proiectDupaModificari\\proiectTW\\frontend\\src\\components\\ProfesorVede.js":"6","C:\\Users\\RobertBraga\\Desktop\\proiectDupaModificari\\proiectTW\\frontend\\src\\components\\ProfesorAdauga.js":"7","C:\\Users\\RobertBraga\\Desktop\\proiectDupaModificari\\proiectTW\\frontend\\src\\components\\Profesor.js":"8","C:\\Users\\RobertBraga\\Desktop\\proiectDupaModificari\\proiectTW\\frontend\\src\\ApiRoutes.js":"9","C:\\Users\\RobertBraga\\Desktop\\proiectDupaModificari\\proiectTW\\frontend\\src\\Calls.js":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":989,"mtime":1611322977401,"results":"14","hashOfConfig":"12"},{"size":3524,"mtime":1611323040679,"results":"15","hashOfConfig":"12"},{"size":5717,"mtime":1611323319522,"results":"16","hashOfConfig":"12"},{"size":4277,"mtime":1611323258993,"results":"17","hashOfConfig":"12"},{"size":3770,"mtime":1611323215164,"results":"18","hashOfConfig":"12"},{"size":3012,"mtime":1611323102606,"results":"19","hashOfConfig":"12"},{"size":314,"mtime":1611322958923,"results":"20","hashOfConfig":"12"},{"size":1195,"mtime":1611322994352,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"nc52j3",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"24"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\RobertBraga\\Desktop\\proiectDupaModificari\\proiectTW\\frontend\\src\\index.js",[],["49","50"],"C:\\Users\\RobertBraga\\Desktop\\proiectDupaModificari\\proiectTW\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\RobertBraga\\Desktop\\proiectDupaModificari\\proiectTW\\frontend\\src\\App.js",["51"],"import logo from './logo.svg';\nimport './App.css';\nimport React, {Component} from 'react';\nimport ProfesorAdauga from './components/ProfesorAdauga';\nimport ProfesorVede from './components/ProfesorVede';\nimport Student from './components/Student';\nimport Profesor from './components/Profesor';\nimport PaginaPrincipala from './components/PaginaPrincipala';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\n\n// Clasa principala a aplicatiei\n\nclass App extends Component{\n  render(){\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path = '/' exact strict component = {PaginaPrincipala}/>\n        <Route path = '/student' exact strict component = {Student}/>\n        <Route path = '/profesor' exact strict component = {Profesor}/>\n        <Route path = '/profesor/add' exact strict component = {ProfesorAdauga}/>\n        <Route path = '/profesor/view' exact strict component = {ProfesorVede}/>\n      </Switch>\n\n    </BrowserRouter>\n    \n  );\n}}\n\nexport default App;\n","C:\\Users\\RobertBraga\\Desktop\\proiectDupaModificari\\proiectTW\\frontend\\src\\components\\PaginaPrincipala.js",["52"],"import React, {Component} from 'react';\r\nimport {profesorRoute, studentRoute} from '../ApiRoutes';\r\nimport {get} from '../Calls';\r\nimport {Button, ButtonGroup, IconButton, TextField, Grid} from '@material-ui/core';\r\nimport swal from 'sweetalert'\r\n\r\n\r\n//Componenta pentru pagina principala \r\n\r\nexport default class PaginaPrincipala extends Component{\r\n    constructor (props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            studenti:[],\r\n            profesori: [],\r\n            nume: null,\r\n            prenume: null\r\n        }\r\n    }\r\n\r\n\r\n    async componentDidMount(){\r\n        let data1 = await get(studentRoute);\r\n        let data2 = await get(profesorRoute);\r\n        \r\n        if(data1.hasErrors){\r\n            alert(data1.message);\r\n            return;\r\n        }\r\n        if(data2.hasErrors){\r\n            alert(data2.message);\r\n            return;\r\n        }\r\n\r\n        this.setState({studenti: data1});\r\n        this.setState({profesori: data2});\r\n    }\r\n    // Functie pentru preluare nume\r\n    handleChangeNume(e){\r\n        this.setState({nume: e.target.value});\r\n    }\r\n    //Functie pentru preluare prenume\r\n    handleChangePrenume(e){\r\n        this.setState({prenume: e.target.value});\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Grid container\r\n            direction=\"column\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            style = {{minHeight: \"100vh\"}}>\r\n                <TextField\r\n                    id = \"tfNume\"\r\n                    label=\"Nume\"\r\n                    variant=\"filled\"\r\n                    required\r\n                    onChange = {e => this.handleChangeNume(e)}></TextField>\r\n                <br/>\r\n                <TextField id = \"tfPrenume\"\r\n                    label=\"Prenume\"\r\n                    variant=\"filled\"\r\n                    required\r\n                    onChange = {e => this.handleChangePrenume(e)}></TextField>\r\n                <br/>\r\n                \r\n                <ButtonGroup variant = \"text\">\r\n                    <Button \r\n                    color=\"primary\"\r\n                    onClick={() => {\r\n                        var nume = this.state.nume;\r\n                        var prenume = this.state.prenume;\r\n                        \r\n                        var student = this.state.studenti.find(x => x.StudentNume === nume && x.StudentPrenume===prenume);\r\n                        if(student){\r\n                        this.props.history.push({pathname: \"/student\", data: student});\r\n                        }\r\n                        else{\r\n                            swal('Ooops...','Utilizatorul nu exista!','error');\r\n                        }\r\n                    }}>Student</Button>\r\n                    <Button \r\n                    color=\"primary\"\r\n                    onClick={() => {\r\n                        var nume = this.state.nume;\r\n                        var prenume = this.state.prenume;\r\n                       \r\n                        var profesor = this.state.profesori.find(x => x.ProfesorNume === nume && x.ProfesorPrenume===prenume);\r\n                        if(profesor){\r\n                            this.props.history.push({pathname: \"/profesor\", data: profesor});\r\n                        }\r\n                        else{\r\n                            swal('Ooops...','Utilizatorul nu exista!','error');\r\n                        }   \r\n                    }}>Profesor</Button>\r\n\r\n                </ButtonGroup>\r\n            \r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    \r\n\r\n}","C:\\Users\\RobertBraga\\Desktop\\proiectDupaModificari\\proiectTW\\frontend\\src\\components\\Student.js",["53","54"],"import { TextField, Grid,Button,Paper, IconButton } from '@material-ui/core';\r\nimport React, {Component} from 'react';\r\nimport { activitateRoute, feedbackRoute } from '../ApiRoutes';\r\nimport {get, post} from '../Calls';\r\nimport SentimentDissatisfied from '@material-ui/icons/SentimentDissatisfied';\r\nimport SentimentVerySatisfied from '@material-ui/icons/SentimentVerySatisfied';\r\nimport SentimentSatisfiedAlt from '@material-ui/icons/SentimentSatisfiedAlt';\r\nimport SentimentVeryDissatisfied from '@material-ui/icons/SentimentVeryDissatisfied';\r\nimport swal from 'sweetalert'\r\n\r\n\r\n// Clasa pentru pagina studentului\r\n\r\nconst enlarge={\r\n    icon1:{\r\n        width:100,\r\n        height:100,\r\n        color:'#dd2828'\r\n    },\r\n    icon2:{\r\n        width:100,\r\n        height:100,\r\n        color:'#d14b4b'\r\n    },\r\n    icon3:{\r\n        width:100,\r\n        height:100,\r\n        color:'#2d9731'\r\n    },\r\n    icon4:{\r\n        width:100,\r\n        height:100,\r\n        color:'#1dae23'\r\n    }\r\n};\r\nvar bodyParser = require('body-parser');\r\n\r\nexport default class Student extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            student: this.props.location.data,\r\n            codActivitate: null,\r\n            listaActivitati: null,\r\n            activitateCurenta: null,\r\n            Feedback: {\r\n                StudentId: 0,\r\n                Timp: null,\r\n                CodUnicActivitate: 0,\r\n                FeedbackTip: \"\"\r\n            },\r\n            stare: null\r\n        }\r\n        console.log(this.state.student);\r\n        \r\n    }\r\n\r\n    async componentDidMount(){\r\n        let data = await get(activitateRoute);\r\n        if(data.hasErrors){\r\n            alert(data.message);\r\n            return;\r\n        }\r\n\r\n        this.setState({listaActivitati: data});\r\n        \r\n    }\r\n\r\n    //preluare cod activitate\r\n    onHandleChange(e){\r\n        this.setState({codActivitate: e.target.value});\r\n    }\r\n\r\n\r\n    //handler pentru apasare enter\r\n    keyPress(e){\r\n        var a = this.state.listaActivitati.find(x => x.CodUnicActivitate == this.state.codActivitate);\r\n        if(e.key === 'Enter'){\r\n            if(a !== 'undefined'){\r\n\r\n               \r\n                var dataCurenta = new Date();\r\n                var oldDateObj = new Date(a.DataActivitate);\r\n                var newDateObj = new Date();\r\n                newDateObj.setTime(oldDateObj.getTime() + (a.Durata * 60 * 1000));\r\n                if(dataCurenta.getTime()>=oldDateObj.getTime() && dataCurenta.getTime()<=newDateObj.getTime())\r\n                {\r\n                    this.setState({activitateCurenta: a});\r\n                    swal(\"Felicitari!\",\"Puteti adauga feedback\",\"success\");\r\n                    this.setState({stare:true})\r\n                }\r\n                else\r\n                if(dataCurenta.getTime()>=newDateObj.getTime()){\r\n                    swal(\"Atentie!\",\"Activitate terminata\",\"warning\");\r\n                    this.setState({stare:false})\r\n                }\r\n                else{\r\n                    swal(\"Atentie!\",\"Activitatea inca nu a inceput\",\"warning\");\r\n                    this.setState({stare:false})\r\n                }\r\n                \r\n            }\r\n        }     \r\n        \r\n    }\r\n\r\n    //adaugare feedback in baza de date\r\n    async adaugaFeedback(feedbackTip){\r\n\r\n        if(this.state.stare){\r\n        let timp = new Date();\r\n\r\n        let fb = this.state.Feedback;\r\n        fb.CodUnicActivitate = this.state.codActivitate;\r\n        fb.StudentId = this.state.student.StudentId;\r\n        fb.Timp = timp;\r\n        fb.FeedbackTip = feedbackTip;\r\n        this.setState({Feedback: fb});\r\n        var feedback = await post( feedbackRoute, \r\n            this.state.Feedback);\r\n        if(feedback.hasErrors){\r\n            alert(feedback.message);\r\n            return;\r\n        }\r\n        swal(\"Felicitari!\",\"Feedback adaugat!\",\"success\");\r\n    }\r\n    }\r\n   \r\n    render(){\r\n        return (\r\n            <Paper>\r\n                <Button variant=\"text\" \r\n            style={\r\n                {align:\"left\"}\r\n            }\r\n            onClick={()=>{this.props.history.push({pathname:'/'})}}>\r\n                Inapoi\r\n            </Button>\r\n            <Grid container\r\n            direction=\"column\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            style = {{minHeight: \"100vh\"}}>\r\n                <TextField\r\n                id = \"tfActivitate\"\r\n                label=\"Cod activitate\"\r\n                variant=\"filled\"\r\n                type=\"number\"\r\n                required\r\n                onChange = {e => {\r\n                    this.onHandleChange(e);\r\n                }}\r\n                onKeyPress = {e => this.keyPress(e)}></TextField>\r\n           <div>\r\n             <IconButton onClick={()=>{this.adaugaFeedback('FoarteRau'); }}>\r\n                    <SentimentVeryDissatisfied fontSize=\"large\" style={enlarge.icon1} ></SentimentVeryDissatisfied>\r\n            </IconButton>\r\n            <IconButton onClick={()=>{this.adaugaFeedback('Rau'); }}>\r\n                <SentimentDissatisfied fontSize=\"large\" style={enlarge.icon2} ></SentimentDissatisfied>\r\n            </IconButton>\r\n           </div>\r\n           <div>\r\n           <IconButton onClick={()=>{this.adaugaFeedback('Bun');\r\n    }}>\r\n                <SentimentSatisfiedAlt fontSize=\"large\" style={enlarge.icon3}></SentimentSatisfiedAlt>\r\n            </IconButton>\r\n            <IconButton onClick={()=>{this.adaugaFeedback('FoarteBun'); }}>\r\n                <SentimentVerySatisfied fontSize =\"large\" style={enlarge.icon4}></SentimentVerySatisfied>\r\n            </IconButton>\r\n           </div>\r\n        </Grid>\r\n        </Paper>\r\n            \r\n        )\r\n    }\r\n\r\n   \r\n}\r\n","C:\\Users\\RobertBraga\\Desktop\\proiectDupaModificari\\proiectTW\\frontend\\src\\components\\ProfesorVede.js",["55","56"],"import { Button, Grid,Paper,Table,TableBody,TableCell,TableContainer,TableHead,TableRow,TextField } from '@material-ui/core';\r\nimport React, {Component} from 'react';\r\nimport { activitateRoute, feedbackRoute } from '../ApiRoutes';\r\nimport {get} from '../Calls';\r\nimport swal from 'sweetalert';\r\n\r\n//clasa pentru a vizualizare feedback pentru o activitate\r\nexport default class ProfesorVede extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            codAct:null,\r\n            profesor:this.props.location.data,\r\n            listaActivitati:[],\r\n            feedbackList:[]\r\n        }\r\n    }\r\n\r\n    async componentDidMount(){\r\n        let data = await get(activitateRoute);\r\n        if(data.hasErrors){\r\n            alert(data.message);\r\n            return;\r\n        }\r\n        data = data.filter(x => x.ProfesorId ===this.state.profesor.ProfesorId)\r\n        this.setState({listaActivitati: data});\r\n    }\r\n\r\n    //preluare cod activitate\r\n    onHandleChange(e){\r\n        this.setState({codAct:e.target.value});\r\n    }\r\n\r\n    //verificare activitate si preluare lista feedback\r\n    async verificaActivitate(){\r\n        let act = this.state.listaActivitati.find(x=>x.CodUnicActivitate == this.state.codAct);\r\n        if(act){\r\n            let data = await get(feedbackRoute);\r\n            if(data.hasErrors){\r\n                alert(data.message);\r\n                return;\r\n            }\r\n            data = data.filter(x=>x.CodUnicActivitate==act.CodUnicActivitate)\r\n\r\n            for(let i=0;i<data.length;i++){\r\n                data[i].Timp = new Date(data[i].Timp).toLocaleString();\r\n            }\r\n           console.log(data)\r\n            this.setState({\r\n                feedbackList: data\r\n            })\r\n        }\r\n        else{\r\n            swal('Oops...','Activitatea nu exista','error');\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <Paper>\r\n            <Button variant=\"text\" \r\n            style={\r\n                {align:\"left\"}\r\n            }\r\n            onClick={()=>{this.props.history.push({pathname:'/profesor',data:this.state.profesor})}}>\r\n                Inapoi\r\n            </Button>\r\n            <Grid container\r\n            direction=\"column\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            style = {{minHeight: \"40vh\"}}>\r\n                \r\n                <div>\r\n                \r\n                <TextField \r\n                id=\"codAct\"\r\n                label=\"Cod activitate\"\r\n                type=\"number\"\r\n                required\r\n                onChange={(e)=>{\r\n                    this.onHandleChange(e);\r\n                }}\r\n                ></TextField>\r\n               \r\n                <Button variant=\"outlined\"\r\n                \r\n                onClick={\r\n                    ()=>{\r\n                        this.verificaActivitate()\r\n                    }\r\n                }>Vezi feedback</Button>\r\n\r\n                <Button variant=\"outlined\"\r\n                \r\n                onClick={\r\n                    ()=>{\r\n                        this.verificaActivitate()\r\n                    }\r\n                }>Actualizeaza</Button>\r\n                </div>\r\n                \r\n                \r\n\r\n\r\n            </Grid>\r\n            <TableContainer>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Tip feedback</TableCell>\r\n                                <TableCell align=\"right\">Data</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {\r\n                                this.state.feedbackList.map((row)=>(\r\n                                    <TableRow key = {row.FeedbackId}>\r\n                                         <TableCell component=\"th\" scope=\"row\">{row.FeedbackTip}</TableCell>\r\n                                        <TableCell align=\"right\">{row.Timp}</TableCell>\r\n                                    </TableRow>\r\n                                ))\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }\r\n}","C:\\Users\\RobertBraga\\Desktop\\proiectDupaModificari\\proiectTW\\frontend\\src\\components\\ProfesorAdauga.js",["57"],"import { Button, Grid, isWidthDown, Paper, TextField } from '@material-ui/core';\r\nimport React, {Component} from 'react';\r\nimport { post } from '../Calls';\r\nimport {activitateRoute} from '../ApiRoutes'\r\nimport swal from 'sweetalert'\r\n\r\n//Clasa pentru adaugarea unei activitati\r\n\r\nconst style = {\r\n    text: {\r\n        marginBottom: 20,\r\n        width : 250\r\n    }\r\n}\r\n\r\nexport default class ProfesorAdauga extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            profesor: this.props.location.data,\r\n            activitate: {\r\n                CodUnicActivitate: 0,\r\n                Descriere: \"\",\r\n                DataActivitate: null,\r\n                Durata: 0,\r\n                ProfesorId: 0,\r\n                FeedbackuriActivitate: []\r\n            }\r\n        }\r\n    }\r\n    //preluare descriere\r\n    onHandleChangeDescriere(e){\r\n        let activitate = this.state.activitate;\r\n        activitate.Descriere = e.target.value;\r\n        this.setState({activitate: activitate});\r\n    }\r\n    //preluare data\r\n    onHandleChangeData(e){\r\n        let data = this.state.activitate;\r\n        data.DataActivitate = e.target.value;\r\n        this.setState({activitate: data});\r\n    }\r\n    //preluare durata\r\n    onHandleChangeDurata(e){\r\n        let durata = this.state.activitate;\r\n        durata.Durata = e.target.value;\r\n        this.setState({activitate: durata});\r\n    }\r\n    //functie de inserare activitate in baza de date\r\n    async adaugaActivitate(){\r\n        let a = this.state.activitate;\r\n        let data = new Date(a.DataActivitate);\r\n        let cod = this.state.profesor.ProfesorId*1000+data.getTime()/10000%1000;\r\n        console.log(cod);\r\n        a.CodUnicActivitate=cod;\r\n        a.ProfesorId=this.state.profesor.ProfesorId;\r\n        this.setState({\r\n            activitate:a\r\n        })\r\n        let aux = await post(activitateRoute,this.state.activitate);\r\n        if(aux.hasErrors){\r\n            alert(aux.message);\r\n            return;\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <Paper>\r\n        <Button variant=\"text\" \r\n            style={\r\n                {align:\"left\"}\r\n            }\r\n            onClick={()=>{this.props.history.push({pathname:'/profesor',data:this.state.profesor})}}>\r\n                Inapoi\r\n            </Button>\r\n        <Grid container\r\n        direction=\"column\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        style = {{minHeight: \"100vh\"}}>\r\n            <TextField\r\n            id=\"descriere\"\r\n            label=\"Descriere\"\r\n            style={style.text}\r\n            required\r\n            onChange = { e => {\r\n                this.onHandleChangeDescriere(e);\r\n                console.log(e.target.value);\r\n            }}></TextField>\r\n            <TextField\r\n            id=\"data\"\r\n            required\r\n            style={style.text}\r\n            type=\"datetime-local\"\r\n            onChange = { e => {\r\n                this.onHandleChangeData(e);\r\n                console.log(e.target.value);\r\n            }}></TextField>\r\n            <TextField\r\n            id=\"durata\"\r\n            style={style.text}\r\n            label=\"Durata (min)\"\r\n            required\r\n            type=\"number\"\r\n            onChange = { e => {\r\n                this.onHandleChangeDurata(e);\r\n                console.log(e.target.value);\r\n            }}></TextField>\r\n            <Button\r\n            variant=\"outlined\"\r\n            onClick={()=>{\r\n            \r\n            this.adaugaActivitate();\r\n            swal('Felicitari!','Activitatea a fost adaugata','success');\r\n            this.props.history.push({pathname:'/profesor',data:this.state.profesor});   \r\n            }}>Adauga activitate</Button>\r\n        </Grid>\r\n\r\n        </Paper>\r\n        )\r\n    }\r\n}","C:\\Users\\RobertBraga\\Desktop\\proiectDupaModificari\\proiectTW\\frontend\\src\\components\\Profesor.js",["58","59","60","61"],"import React, {Component} from 'react';\r\nimport {get} from '../Calls';\r\nimport { activitateRoute, profesorRoute } from '../ApiRoutes';\r\nimport {Button,Paper, ButtonGroup, IconButton, TextField, Grid, Table,TableBody,TableCell,TableContainer,TableHead,TableRow} from '@material-ui/core'; \r\n\r\n\r\n// clasa pentru pagina principala a profesorului\r\nexport default class Profesor extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            profesor: this.props.location.data,\r\n            activitati: []\r\n        }\r\n    }\r\n\r\n    async componentDidMount(){\r\n        let data2 = await get(activitateRoute);\r\n        if(data2.hasErrors){\r\n            alert(data2.message);\r\n            return;\r\n        }\r\n        //filtrare activitati dupa id-ul profesorului\r\n        data2 = data2.filter(x=>x.ProfesorId == this.state.profesor.ProfesorId);\r\n        this.setState({activitati: data2});\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Paper>\r\n                <Button variant=\"text\" \r\n            style={\r\n                {align:\"left\"}\r\n            }\r\n            onClick={()=>{this.props.history.push({pathname:'/'})}}>\r\n                Inapoi\r\n            </Button>\r\n           <Grid container\r\n           direction=\"column\"\r\n           justify=\"center\"\r\n           alignItems=\"center\"\r\n           style = {{minHeight: \"100vh\"}}>\r\n            <ButtonGroup variant = \"text\">\r\n                <Button \r\n                color=\"primary\"\r\n                onClick={() => {\r\n                    this.props.history.push({pathname: \"/profesor/add\", data:this.state.profesor});\r\n                }}>Adauga activitate</Button>\r\n                <Button \r\n                color=\"primary\"\r\n                onClick={() => {\r\n                    this.props.history.push({pathname: \"/profesor/view\", data:this.state.profesor});\r\n                }}>Vezi feedback</Button>\r\n\r\n                </ButtonGroup>\r\n\r\n                <TableContainer>\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>Cod activitate</TableCell>\r\n                                <TableCell align=\"right\">Activitate</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {\r\n                                this.state.activitati.map((row)=>(\r\n                                    <TableRow key = {row.CodUnicActivitate}>\r\n                                         <TableCell component=\"th\" scope=\"row\">{row.CodUnicActivitate}</TableCell>\r\n                                        <TableCell align=\"right\">{row.Descriere}</TableCell>\r\n                                    </TableRow>\r\n                                ))\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n           </Grid>\r\n           </Paper>\r\n        )\r\n    }\r\n}","C:\\Users\\RobertBraga\\Desktop\\proiectDupaModificari\\proiectTW\\frontend\\src\\ApiRoutes.js",[],"C:\\Users\\RobertBraga\\Desktop\\proiectDupaModificari\\proiectTW\\frontend\\src\\Calls.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":1,"column":8,"nodeType":"68","messageId":"69","endLine":1,"endColumn":12},{"ruleId":"66","severity":1,"message":"70","line":4,"column":30,"nodeType":"68","messageId":"69","endLine":4,"endColumn":40},{"ruleId":"66","severity":1,"message":"71","line":36,"column":5,"nodeType":"68","messageId":"69","endLine":36,"endColumn":15},{"ruleId":"72","severity":1,"message":"73","line":78,"column":74,"nodeType":"74","messageId":"75","endLine":78,"endColumn":76},{"ruleId":"72","severity":1,"message":"73","line":36,"column":74,"nodeType":"74","messageId":"75","endLine":36,"endColumn":76},{"ruleId":"72","severity":1,"message":"73","line":43,"column":54,"nodeType":"74","messageId":"75","endLine":43,"endColumn":56},{"ruleId":"66","severity":1,"message":"76","line":1,"column":24,"nodeType":"68","messageId":"69","endLine":1,"endColumn":35},{"ruleId":"66","severity":1,"message":"77","line":3,"column":27,"nodeType":"68","messageId":"69","endLine":3,"endColumn":40},{"ruleId":"66","severity":1,"message":"70","line":4,"column":36,"nodeType":"68","messageId":"69","endLine":4,"endColumn":46},{"ruleId":"66","severity":1,"message":"78","line":4,"column":48,"nodeType":"68","messageId":"69","endLine":4,"endColumn":57},{"ruleId":"72","severity":1,"message":"73","line":25,"column":46,"nodeType":"74","messageId":"75","endLine":25,"endColumn":48},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'IconButton' is defined but never used.","'bodyParser' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'isWidthDown' is defined but never used.","'profesorRoute' is defined but never used.","'TextField' is defined but never used.","no-global-assign","no-unsafe-negation"]